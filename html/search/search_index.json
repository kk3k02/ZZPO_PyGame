{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZZPO","text":"<p>Celem naszego projektu jest stworzenie gry 2D kt\u00f3rej logika jest wzorowana na popularnej grze \u201cAsteroids\u201d. W naszej grze gracz wciela si\u0119 w posta\u0107 z popularnej kresk\u00f3wki i walczy ze z\u0142ymi bakteriami i wirusami.</p>"},{"location":"#wymagania-funkcjonalne","title":"Wymagania funkcjonalne","text":"<ul> <li>Gracz mo\u017ce kontrolowa\u0107 swoj\u0105 posta\u0107 poprzez ruch prz\u00f3d, ty\u0142, obr\u00f3t w prawo, obr\u00f3t w lewo oraz strza\u0142.</li> <li>Gra generuje losowych przeciwnik\u00f3w, kt\u00f3rzy poruszaj\u0105 si\u0119 ruchem jednostajnym prostoliniowym.</li> <li>Gracz mo\u017ce niszczy\u0107 przeciwnik\u00f3w poprzez strzelanie do nich.</li> <li>Niekt\u00f3rzy przeciwnicy r\u00f3wnie\u017c posiadaj\u0105 mo\u017cliwo\u015b\u0107 strzelania.</li> <li>Przeciwnik po trafieniu rozpada si\u0119 na mniejsze cz\u0119\u015bci lub ulega ca\u0142kowitemu zniszczeniu.</li> <li>Gracz traci \u017cycia w momencie zderzenia lub trafieniu wrogim pociskiem.</li> <li>Gracz zwi\u0119ksza sw\u00f3j wynik poprzez trafianie przeciwnik\u00f3w.</li> </ul>"},{"location":"#wymagania-niefunkcjonalne","title":"Wymagania niefunkcjonalne","text":"<ul> <li>Gra desktopowa, napisana w j\u0119zyku python z wykorzystaniem biblioteki pygames.</li> </ul>"},{"location":"#pojecia","title":"Poj\u0119cia","text":"<ul> <li><code>Gracz</code>: posta\u0107 sterowana przez osob\u0119 graj\u0105c\u0105 w gr\u0119.</li> <li><code>Przeciwnik</code>: posta\u0107 sterowana przez komputer.</li> <li><code>Trafienie</code>: kolizja pocisku z graczem lub przeciwnikiem.</li> <li><code>Zderzenie</code>: kolizja gracza z przeciwnikiem.</li> <li><code>Obra\u017cenia</code>: \u0142\u0105czna suma zderze\u0144 i kolizji gracza z przeciwnikiem.</li> <li><code>\u017bycia</code>: maksymalna ilo\u015b\u0107 obra\u017ce\u0144 mo\u017cliwa do przyj\u0119cia.</li> <li><code>Wynik</code>: suma punkt\u00f3w uzyskanych za trafienia przeciwnik\u00f3w.</li> </ul>"},{"location":"diagrams/","title":"Diagramy","text":""},{"location":"diagrams/#diagram-klas","title":"Diagram klas","text":""},{"location":"diagrams/#diagram-przypadkow-uzycia","title":"Diagram przypadk\u00f3w u\u017cycia","text":""},{"location":"diagrams/#diagram-pakietow","title":"Diagram pakiet\u00f3w","text":""},{"location":"docs/","title":"Dokumentacja kodu","text":"<p>W projekcje zdecywowano si\u0119 wykorzysta\u0107 nowe standardy Pythona zwi\u0105zane z dokumentacj\u0105 kodu. Poni\u017cej znajduje si\u0119 opis konwencji oraz wykorzystane narz\u0119dzia do automatycznej generacji dokumentacji z kodu.</p>"},{"location":"docs/#dokumentowanie-kodu-za-pomoca-docstringow","title":"Dokumentowanie kodu za pomoc\u0105 docstring\u00f3w","text":"<p>Konwencja Pythona PEP 257 wyja\u015bnia spos\u00f3b dokumentacji kodu. Zgodnie z t\u0105 konwencj\u0105 ka\u017cdy modu\u0142, klasa oraz funkcja powinny posiada\u0107 komentarz dokumentacyjny - tak zwany docstring. Jego tre\u015b\u0107 jest umieszczona pomi\u0119dzy potr\u00f3jnymi znakami cudzys\u0142ow\u00f3w <code>\"\"\" \"\"\"</code>. W docstringu znajduje si\u0119 opis dzia\u0142ania, przyjmowanych argument\u00f3w oraz zwracanych warto\u015bci. S\u0105 r\u00f3\u017cne style pisania docstring\u00f3w. W niniejszym projekcje zdecydowano si\u0119 na styl zaproponowany przez Google ze wzgl\u0119du na jego przejrzysto\u015b\u0107.</p> <p>Na poni\u017cszym listingu widnieje przyk\u0142adowy docstring napisany w stylu Google.</p> <pre><code>def fetch_smalltable_rows(\n    table_handle: smalltable.Table,\n    keys: Sequence[bytes | str],\n    require_all_keys: bool = False,\n) -&gt; Mapping[bytes, tuple[str, ...]]:\n    \"\"\"Fetches rows from a Smalltable.\n\n    Retrieves rows pertaining to the given keys from the Table instance\n    represented by table_handle.  String keys will be UTF-8 encoded.\n\n    Args:\n        table_handle: An open smalltable.Table instance.\n        keys: A sequence of strings representing the key of each table\n          row to fetch.  String keys will be UTF-8 encoded.\n        require_all_keys: If True only rows with values set for all keys will be\n          returned.\n\n    Returns:\n        A dict mapping keys to the corresponding table row data\n        fetched. Each row is represented as a tuple of strings. For\n        example:\n\n        {b'Serak': ('Rigel VII', 'Preparer'),\n         b'Zim': ('Irk', 'Invader'),\n         b'Lrrr': ('Omicron Persei 8', 'Emperor')}\n\n        Returned keys are always bytes.  If a key from the keys argument is\n        missing from the dictionary, then that row was not found in the\n        table (and require_all_keys must have been False).\n\n    Raises:\n        IOError: An error occurred accessing the smalltable.\n    \"\"\"\n</code></pre>"},{"location":"docs/#generowanie-dokumentacji-z-kodu","title":"Generowanie dokumentacji z kodu","text":"<p>Do tego celu by\u0142y rozwa\u017cane 2 powszechne narz\u0119dzia - Sphinx oraz MkDocs. Oba narz\u0119dzia pozwalaj\u0105 na generowanie dokumentacji z kodu na podstawie wcze\u015bniej przygotowanych docstring\u00f3w. Sphinx zwykle wykorzystywany w du\u017cych projektach ze wzgl\u0119du na mo\u017cliwo\u015b\u0107 wi\u0119kszego dostowowania jego opcji do w\u0142asnych potrzeb, co jednak mocno komplikuje jego konfiguracj\u0119. Z tego powodu zdecydowano si\u0119 na MkDocs ze wzgl\u0119du na bardziej intuicyjna konfiguracj\u0119 oraz wsparcie dla markdowna.</p> <p>MkDocs to szybki i prosty generator statycznych stron internetowych, kt\u00f3ry jest przeznaczony do tworzenia dokumentacji projektu. Pliki \u017ar\u00f3d\u0142owe dokumentacji s\u0105 pisane w Markdown i konfigurowane za pomoc\u0105 pojedynczego pliku konfiguracyjnego YAML.</p>"},{"location":"docs/#struktua-plikow-zwiazanych-z-mkdocs","title":"Struktua plik\u00f3w zwi\u0105zanych z MkDocs","text":"<pre><code>\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 api_reference\n\u2502   \u2502   \u251c\u2500\u2500 bullet_reference.md\n\u2502   \u2502   \u251c\u2500\u2500 cell_reference.md\n\u2502   \u2502   \u251c\u2500\u2500 enemy_bullet_reference.md\n\u2502   \u2502   \u251c\u2500\u2500 enemy_reference.md\n\u2502   \u2502   \u251c\u2500\u2500 player_reference.md\n\u2502   \u2502   \u2514\u2500\u2500 virus_reference.md\n\u2502   \u251c\u2500\u2500 docs.md\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 src\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"docs/#struktura-pliku-konfiguracyjnego-mkdocsyml","title":"Struktura pliku konfiguracyjnego <code>mkdocs.yml</code>","text":"<p>MkDocs konfigurowane jest za pomoc\u0105 jednego pliku. Poni\u017cej przedstawiono plik konfiguracyjny naszego projektu.</p> <pre><code># Nazwa projektu\nsite_name: ZZPO Project documentation\ncopyright: ZZPO Team\n\n# Konfiguracja wygl\u0105du strony\ntheme:\n  name: \"material\"\n  palette:\n    # Palette toggle for light mode\n    - scheme: default\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n\n# Podlinkowanie plik\u00f3w z tre\u015bci\u0105 srony\nnav:\n  - Home: 'index.md'\n  - API Reference:\n    - Player: 'api_reference/player_reference.md'\n    - Virus: 'api_reference/virus_reference.md'\n    - Cell: 'api_reference/cell_reference.md'\n    - Enemy: 'api_reference/enemy_reference.md'\n    - Enemy Bullet: 'api_reference/enemy_bullet_reference.md'\n    - Bullet: 'api_reference/bullet_reference.md'\n\n# Opcjonalne wtyczki i rozszerzenia\nplugins:\n  - search\n  - mkdocstrings\n\nmarkdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - tables\n</code></pre>"},{"location":"implementation_descr/","title":"Opis Implementacji Gry","text":""},{"location":"implementation_descr/#struktura-projektu","title":"Struktura Projektu","text":"<p>Projekt jest zorganizowany w modularny spos\u00f3b, co u\u0142atwia zarz\u0105dzanie i rozw\u00f3j kodu. G\u0142\u00f3wne komponenty projektu znajduj\u0105 si\u0119 w katalogu <code>src</code> i obejmuj\u0105 nast\u0119puj\u0105ce pliki:</p> <ul> <li><code>main.py</code>: Punkt wej\u015bciowy do gry, zarz\u0105dza g\u0142\u00f3wn\u0105 p\u0119tl\u0105 gry oraz inicjalizacj\u0105 wszystkich zasob\u00f3w.</li> <li><code>player.py</code>: Definiuje klas\u0119 <code>Player</code>, kt\u00f3ra reprezentuje statek gracza i zarz\u0105dza jego ruchem oraz interakcjami.</li> <li><code>bullet.py</code>: Zawiera logik\u0119 pocisk\u00f3w wystrzeliwanych przez gracza.</li> <li><code>enemy.py</code>: Definiuje klas\u0119 <code>Enemy</code>, reprezentuj\u0105c\u0105 przeciwnik\u00f3w w grze.</li> <li><code>enemyBullet.py</code>: Zawiera logik\u0119 pocisk\u00f3w wystrzeliwanych przez przeciwnik\u00f3w.</li> <li><code>cell.py</code>, <code>virus.py</code>, <code>object.py</code>: Inne komponenty gry, reprezentuj\u0105ce r\u00f3\u017cne obiekty i ich interakcje.</li> </ul>"},{"location":"implementation_descr/#inicjalizacja-gry","title":"Inicjalizacja Gry","text":"<p>G\u0142\u00f3wna klasa gry, <code>Game</code>, jest zdefiniowana w pliku <code>main.py</code>. Podczas inicjalizacji (konstruktor <code>__init__</code>) wykonywane s\u0105 nast\u0119puj\u0105ce kroki:</p> <ul> <li>Inicjalizacja Pygame: Inicjalizowana jest biblioteka Pygame, co umo\u017cliwia tworzenie okna gry i zarz\u0105dzanie zasobami multimedialnymi.</li> <li>Ustawienia ekranu: Okre\u015blana jest szeroko\u015b\u0107 i wysoko\u015b\u0107 okna gry (1000x600 pikseli). Ustawiany jest tytu\u0142 okna gry.</li> <li>\u0141adowanie zasob\u00f3w: Obrazy i d\u017awi\u0119ki s\u0105 \u0142adowane z odpowiednich plik\u00f3w, takich jak t\u0142o, statek gracza, przeciwnicy, d\u017awi\u0119ki strza\u0142\u00f3w i eksplozji.</li> <li>Inicjalizacja zmiennych gry: Inicjalizowane s\u0105 zmienne kontroluj\u0105ce stan gry, takie jak liczba \u017cy\u0107 gracza, wynik, tryb szybkiego strzelania i inne.</li> <li>Tworzenie obiekt\u00f3w gry: Tworzony jest obiekt reprezentuj\u0105cy gracza (<code>Player</code>) oraz listy przechowuj\u0105ce pociski gracza, przeciwnik\u00f3w, pociski przeciwnik\u00f3w i inne obiekty gry.</li> </ul>"},{"location":"implementation_descr/#gowna-petla-gry","title":"G\u0142\u00f3wna P\u0119tla Gry","text":"<p>G\u0142\u00f3wna p\u0119tla gry znajduje si\u0119 w metodzie <code>run</code> klasy <code>Game</code>. P\u0119tla ta wykonuje nast\u0119puj\u0105ce zadania:</p> <ul> <li>Obs\u0142uga zdarze\u0144: Sprawdzane s\u0105 zdarzenia generowane przez u\u017cytkownika, takie jak zamkni\u0119cie okna gry. Reaguje si\u0119 na naciskanie klawiszy steruj\u0105cych ruchem gracza.</li> <li>Aktualizacja stanu gry: Pozycje gracza i innych obiekt\u00f3w s\u0105 aktualizowane na podstawie bie\u017c\u0105cych danych wej\u015bciowych. Aktualizowane s\u0105 r\u00f3wnie\u017c stany, takie jak wynik i liczba \u017cy\u0107.</li> <li>Rysowanie na ekranie: Wszystkie obiekty gry s\u0105 rysowane na ekranie w odpowiednich pozycjach. Ekran jest aktualizowany, aby odzwierciedli\u0107 zmiany wprowadzone w bie\u017c\u0105cej klatce.</li> <li>Kontrola FPS: Ustawiana jest liczba klatek na sekund\u0119 (60 FPS), co zapewnia p\u0142ynno\u015b\u0107 gry.</li> </ul>"},{"location":"implementation_descr/#moduy-gry","title":"Modu\u0142y Gry","text":"<p>Ka\u017cdy modu\u0142 zawiera klasy i funkcje odpowiedzialne za specyficzne aspekty gry:</p> <ul> <li>Klasa <code>Player</code>: Zarz\u0105dza ruchem statku gracza, jego strza\u0142ami oraz kolizjami z innymi obiektami. Ruch gracza jest kontrolowany za pomoc\u0105 strza\u0142ek na klawiaturze. Konstruktor inicjalizuje gracza, ustawia pocz\u0105tkow\u0105 pozycj\u0119, k\u0105t obrotu oraz rysuje gracza na ekranie.</li> <li>Klasa <code>Bullet</code>: Reprezentuje pociski wystrzeliwane przez gracza. Pociski startuj\u0105 z pozycji g\u0142owy gracza i poruszaj\u0105 si\u0119 zgodnie z k\u0105tem obrotu gracza. Klasa zarz\u0105dza pozycj\u0105, ruchem i rysowaniem pocisk\u00f3w oraz sprawdzaniem, czy pocisk znajduje si\u0119 poza ekranem.</li> <li>Klasa <code>Enemy</code>: Reprezentuje przeciwnik\u00f3w, kt\u00f3rzy pojawiaj\u0105 si\u0119 na ekranie. Przeciwnicy startuj\u0105 z losowych punkt\u00f3w na kraw\u0119dziach ekranu i poruszaj\u0105 si\u0119 w kierunku \u015brodka ekranu. Klasa zarz\u0105dza ruchem, rysowaniem i losowym generowaniem pocz\u0105tkowych pozycji przeciwnik\u00f3w.</li> <li>Klasa <code>EnemyBullet</code>: Zarz\u0105dza pociskami wystrzeliwanymi przez przeciwnik\u00f3w. Pociski zmierzaj\u0105 w stron\u0119 gracza, a ich kierunek jest obliczany na podstawie pozycji gracza. Klasa zawiera metody do rysowania pocisk\u00f3w oraz aktualizacji ich pozycji.</li> </ul>"},{"location":"implementation_descr/#inne-komponenty-gry-reprezentujace-rozne-obiekty-i-ich-interakcje","title":"Inne komponenty gry, reprezentuj\u0105ce r\u00f3\u017cne obiekty i ich interakcje","text":"<p>Pliki <code>cell.py</code>, <code>virus.py</code> i <code>object.py</code> zawieraj\u0105 definicje kluczowych obiekt\u00f3w w grze oraz mechanik ich interakcji:</p>"},{"location":"implementation_descr/#klasa-cell-cellpy","title":"Klasa <code>Cell</code> (cell.py)","text":"<p>Klasa <code>Cell</code> reprezentuje kom\u00f3rki w grze, kt\u00f3re s\u0105 przeszkodami lub celami dla gracza. G\u0142\u00f3wne elementy tej klasy to:</p> <ul> <li>Inicjalizacja: Konstruktor ustawia szeroko\u015b\u0107 i wysoko\u015b\u0107 ekranu, obraz reprezentuj\u0105cy kom\u00f3rk\u0119 oraz losow\u0105 pozycj\u0119 startow\u0105 na kraw\u0119dzi ekranu. Kom\u00f3rka mo\u017ce startowa\u0107 z dowolnego miejsca na g\u00f3rnej, dolnej, lewej lub prawej kraw\u0119dzi ekranu.</li> <li>Ruch: Kom\u00f3rka porusza si\u0119 w kierunku \u015brodka ekranu. Kierunek ruchu jest okre\u015blany na podstawie pocz\u0105tkowej pozycji kom\u00f3rki.</li> <li>Rysowanie: Kom\u00f3rka jest rysowana na ekranie za pomoc\u0105 obrazu przypisanego do niej w momencie inicjalizacji.</li> </ul>"},{"location":"implementation_descr/#klasa-virus-viruspy","title":"Klasa <code>Virus</code> (virus.py)","text":"<p>Klasa <code>Virus</code> reprezentuje wirusy w grze, kt\u00f3re maj\u0105 r\u00f3\u017cne rankingi wp\u0142ywaj\u0105ce na ich wielko\u015b\u0107 i obraz. G\u0142\u00f3wne elementy tej klasy to:</p> <ul> <li>Inicjalizacja: Konstruktor przyjmuje szeroko\u015b\u0107 i wysoko\u015b\u0107 ekranu, ranking wirusa oraz list\u0119 obraz\u00f3w dla r\u00f3\u017cnych rang wirus\u00f3w. Na podstawie rankingu wybierany jest odpowiedni obraz i ustawiane s\u0105 wymiary wirusa. Wirus startuje z losowej pozycji na kraw\u0119dzi ekranu.</li> <li>Ruch: Kierunek ruchu wirusa jest ustalany na podstawie jego pocz\u0105tkowej pozycji. Wirus porusza si\u0119 w kierunku \u015brodka ekranu z losow\u0105 pr\u0119dko\u015bci\u0105.</li> <li>Rysowanie: Wirus jest rysowany na ekranie za pomoc\u0105 obrazu przypisanego do niego w momencie inicjalizacji.</li> </ul>"},{"location":"implementation_descr/#klasa-gameobject-objectpy","title":"Klasa <code>GameObject</code> (object.py)","text":"<p>Klasa <code>GameObject</code> jest bazow\u0105 klas\u0105 dla innych obiekt\u00f3w w grze, takich jak <code>Player</code>, <code>Enemy</code>, <code>Cell</code> i <code>Virus</code>. G\u0142\u00f3wne elementy tej klasy to:</p> <ul> <li>Inicjalizacja: Konstruktor przyjmuje szeroko\u015b\u0107 i wysoko\u015b\u0107 ekranu oraz obraz obiektu. Ustawiane s\u0105 podstawowe w\u0142a\u015bciwo\u015bci obiektu, takie jak jego pozycja, szeroko\u015b\u0107, wysoko\u015b\u0107 oraz obraz.</li> <li>Rysowanie: Metoda <code>draw</code> odpowiada za rysowanie obiektu na ekranie. Ka\u017cda klasa dziedzicz\u0105ca po <code>GameObject</code> mo\u017ce nadpisa\u0107 t\u0119 metod\u0119, aby dostosowa\u0107 spos\u00f3b rysowania obiektu.</li> <li>Kolizje: Klasa <code>GameObject</code> mo\u017ce r\u00f3wnie\u017c zawiera\u0107 metody do wykrywania kolizji z innymi obiektami. Metody te mog\u0105 by\u0107 wykorzystywane przez klasy pochodne do implementacji specyficznych interakcji mi\u0119dzy obiektami.</li> </ul>"},{"location":"implementation_descr/#interakcje-i-kolizje","title":"Interakcje i Kolizje","text":"<p>Gra zawiera r\u00f3\u017cne typy interakcji i kolizji:</p> <ul> <li>Kolizje gracza z przeciwnikami: Kiedy statek gracza zderzy si\u0119 z przeciwnikiem, gracz traci \u017cycie. Kolizje s\u0105 wykrywane na podstawie po\u0142o\u017cenia obiekt\u00f3w na ekranie.</li> <li>Kolizje pocisk\u00f3w: Pociski wystrzeliwane przez gracza mog\u0105 niszczy\u0107 obiekty takie jak <code>Virus</code> lub <code>Enemy</code>. Podobnie, pociski wystrzeliwane przez przeciwnik\u00f3w (<code>EnemyBullet</code>) mog\u0105 zniszczy\u0107 statek gracza. Wykrywanie kolizji pomi\u0119dzy pociskami a obiektami opiera si\u0119 na sprawdzaniu, czy pozycje tych obiekt\u00f3w pokrywaj\u0105 si\u0119.</li> <li>Kolizje z przeszkodami: Gracz i przeciwnicy mog\u0105 zderza\u0107 si\u0119 z r\u00f3\u017cnymi przeszkodami na planszy, co mo\u017ce wp\u0142ywa\u0107 na ich ruch lub prowadzi\u0107 do ich zniszczenia.</li> </ul>"},{"location":"implementation_descr/#dzwiek-i-grafika","title":"D\u017awi\u0119k i Grafika","text":"<p>W grze zastosowano r\u00f3\u017cne zasoby multimedialne, kt\u00f3re zwi\u0119kszaj\u0105 jej atrakcyjno\u015b\u0107 i immersj\u0119. Przyjrzyjmy si\u0119 szczeg\u00f3\u0142owo, jakie elementy grafiki s\u0105 u\u017cywane i jakie d\u017awi\u0119ki towarzysz\u0105 poszczeg\u00f3lnym akcjom w grze.</p>"},{"location":"implementation_descr/#grafika","title":"Grafika","text":"<p>Grafika w grze jest u\u017cywana do reprezentowania r\u00f3\u017cnych obiekt\u00f3w oraz t\u0142a. Oto kluczowe elementy graficzne:</p> <ul> <li>T\u0142o gry (<code>background.png</code>): Reprezentuje statyczne t\u0142o, na kt\u00f3rym toczy si\u0119 rozgrywka. Jest to obraz przedstawiaj\u0105cy przestrze\u0144 kosmiczn\u0105, kt\u00f3ry nadaje grze odpowiedni klimat.</li> <li>Statek gracza (<code>ship.png</code>): Reprezentuje statek kosmiczny kontrolowany przez gracza. Jest to g\u0142\u00f3wny obiekt, kt\u00f3rym steruje gracz, unikaj\u0105c przeszk\u00f3d i strzelaj\u0105c do przeciwnik\u00f3w.</li> <li>Przeciwnicy (<code>virus2.png</code>): Obrazy przeciwnik\u00f3w reprezentowane s\u0105 przez r\u00f3\u017cne wirusy. Przeciwnicy poruszaj\u0105 si\u0119 po ekranie i stanowi\u0105 zagro\u017cenie dla gracza.</li> <li>Kom\u00f3rki (<code>cell.png</code>): Kom\u00f3rki s\u0105 innymi obiektami w grze, kt\u00f3re mog\u0105 dzia\u0142a\u0107 jako przeszkody lub cele. Maj\u0105 swoje unikalne obrazy, kt\u00f3re odr\u00f3\u017cniaj\u0105 je od innych obiekt\u00f3w.</li> <li>Asteroidy (<code>virus1.png</code>, <code>dust1.png</code>, <code>dust2.png</code>): Asteroidy to przeszkody w grze, kt\u00f3re mog\u0105 zderza\u0107 si\u0119 ze statkiem gracza lub przeciwnikami. S\u0105 reprezentowane przez r\u00f3\u017cne obrazy, kt\u00f3re r\u00f3\u017cni\u0105 si\u0119 rozmiarami i wygl\u0105dem.</li> </ul>"},{"location":"implementation_descr/#dzwiek","title":"D\u017awi\u0119k","text":"<p>D\u017awi\u0119ki w grze s\u0105 u\u017cywane do podkre\u015blenia r\u00f3\u017cnych akcji i zdarze\u0144. Oto g\u0142\u00f3wne d\u017awi\u0119ki u\u017cywane w grze:</p> <ul> <li>Strza\u0142 (<code>shoot.wav</code>): Ten d\u017awi\u0119k odtwarzany jest za ka\u017cdym razem, gdy gracz wystrzeli pocisk ze swojego statku. D\u017awi\u0119k strza\u0142u dodaje realizmu i pomaga graczowi lepiej zrozumie\u0107, kiedy zosta\u0142 oddany strza\u0142.</li> <li>Eksplozje (<code>bangLarge.wav</code>, <code>bangSmall.wav</code>): D\u017awi\u0119ki eksplozji s\u0105 odtwarzane, gdy dochodzi do kolizji, na przyk\u0142ad gdy pocisk gracza trafia w przeciwnika lub gdy statek gracza zostaje zniszczony. <code>bangLarge.wav</code> jest u\u017cywany dla wi\u0119kszych eksplozji, a <code>bangSmall.wav</code> dla mniejszych.</li> <li>Muzyka t\u0142a (<code>background.wav</code>): Odtwarzana jest ci\u0105g\u0142a muzyka t\u0142a, kt\u00f3ra nadaje grze dynamiczny i anga\u017cuj\u0105cy klimat. Pomaga utrzyma\u0107 gracza w stanie skupienia i podkre\u015bla atmosfer\u0119 gry.</li> <li>Inne d\u017awi\u0119ki: Mog\u0105 by\u0107 u\u017cywane dodatkowe d\u017awi\u0119ki do innych akcji, takich jak zdobywanie punkt\u00f3w, trafianie w przeszkody itp.</li> </ul>"},{"location":"implementation_descr/#szczegoy-implementacji-dzwiekow-i-grafiki","title":"Szczeg\u00f3\u0142y implementacji d\u017awi\u0119k\u00f3w i grafiki","text":"<ul> <li>\u0141adowanie zasob\u00f3w graficznych: Obrazy s\u0105 \u0142adowane z plik\u00f3w w momencie inicjalizacji gry. Ka\u017cdy obraz jest przypisany do odpowiedniego obiektu, na przyk\u0142ad t\u0142o jest przypisane do zmiennej <code>self.background</code>, a obraz statku gracza do <code>self.playerShip</code>.</li> <li>\u0141adowanie zasob\u00f3w d\u017awi\u0119kowych: D\u017awi\u0119ki s\u0105 \u0142adowane z plik\u00f3w i przypisywane do zmiennych. Na przyk\u0142ad, d\u017awi\u0119k strza\u0142u jest przypisany do <code>self.shoot</code>, a d\u017awi\u0119k du\u017cej eksplozji do <code>self.bangLargeSound</code>. Ustawiana jest tak\u017ce g\u0142o\u015bno\u015b\u0107 ka\u017cdego d\u017awi\u0119ku, aby zapewni\u0107 odpowiedni balans d\u017awi\u0119kowy w grze.</li> <li>Odtwarzanie d\u017awi\u0119k\u00f3w: D\u017awi\u0119ki s\u0105 odtwarzane w odpowiednich momentach gry za pomoc\u0105 funkcji <code>play</code>. Na przyk\u0142ad, d\u017awi\u0119k strza\u0142u jest odtwarzany w momencie wystrza\u0142u pocisku, a d\u017awi\u0119k eksplozji w momencie kolizji.</li> </ul> <p>Dzi\u0119ki zastosowaniu odpowiednich zasob\u00f3w d\u017awi\u0119kowych i graficznych, gra staje si\u0119 bardziej realistyczna i anga\u017cuj\u0105ca dla gracza. Grafika pomaga w identyfikacji r\u00f3\u017cnych obiekt\u00f3w i ich stan\u00f3w, a d\u017awi\u0119ki wzmacniaj\u0105 wra\u017cenia p\u0142yn\u0105ce z rozgrywki, informuj\u0105c gracza o wa\u017cnych wydarzeniach w grze.</p>"},{"location":"implementation_descr/#podsumowanie","title":"Podsumowanie","text":"<p>Projekt jest dobrze zorganizowany i modularny, co pozwala na \u0142atwe zarz\u0105dzanie kodem oraz jego rozwijanie. Ka\u017cdy modu\u0142 ma jasno okre\u015blon\u0105 odpowiedzialno\u015b\u0107, co u\u0142atwia debugowanie i wprowadzanie nowych funkcji. G\u0142\u00f3wne funkcje gry s\u0105 zaimplementowane w spos\u00f3b przejrzysty i efektywny, zapewniaj\u0105c p\u0142ynn\u0105 i anga\u017cuj\u0105c\u0105 rozgrywk\u0119.</p>"},{"location":"pygame/","title":"Wizualizacja za pomoc\u0105 biblioteki PyGame","text":"<p>Pygame to zestaw modu\u0142\u00f3w zaprojektowany do tworzenia gier w j\u0119zyku Python. Jest to biblioteka open-source, kt\u00f3ra zapewnia narz\u0119dzia niezb\u0119dne do tworzenia multimedialnych aplikacji, w tym gier 2D i interaktywnych aplikacji graficznych. Pygame bazuje na bibliotece SDL (Simple DirectMedia Layer), co umo\u017cliwia przeno\u015bno\u015b\u0107 kodu na r\u00f3\u017cne platformy.</p>"},{"location":"pygame/#przykadowe-zastosowania-biblioteki-pygame","title":"Przyk\u0142adowe zastosowania biblioteki PyGame","text":"<p>Wszystkie powy\u017csze przyk\u0142ady wykorzystyj\u0105 bibliotek\u0119 PyGame w celu wizualizacji oraz prezentacji danych. Ze wzgl\u0119du na swoj\u0105 prostot\u0119 PyGame okaza\u0142 si\u0119 tutaj \u015bwietnym wyborem.</p> <ul> <li>A Vehicle Density Estimation Traffic Light Control System Using a Two-Dimensional Convolution Neural Network</li> </ul> <p></p> <ul> <li>Analogical Study of Activation Concept in Neural Networks with Neat-Python Module</li> <li>Assessing the Impact of Mask Usage on COVID-19 Transmission Using a Computer Simulation</li> </ul> <p></p>"},{"location":"run/","title":"Instalacja projektu","text":"<p>W projekcie wykorzystano Poetry do zarz\u0105dzania bibliotekami pythonowymi. Zanim uruchomisz projekt upewnij si\u0119 \u017ce masz zainstalowane poetry.</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -  # instaluje najnowsz\u0105 wersj\u0119 poetry - Linux, macOS, Windows (WSL)\n\n(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -  # Windows (Powershell)\n</code></pre>"},{"location":"run/#kopiowanie-plikow-i-instalacja-bibliotek","title":"Kopiowanie plik\u00f3w i instalacja bibliotek","text":"<pre><code>git clone https://github.com/kk3k02/ZZPO_PyGame.git\ncd ZZPO_PyGame\npoetry install --no-root\npoetry shell\n</code></pre>"},{"location":"run/#uruchomienie-projektu","title":"Uruchomienie projektu","text":"<pre><code>python -m src.main\n</code></pre>"},{"location":"api_reference/bullet_reference/","title":"Bullet module","text":""},{"location":"api_reference/bullet_reference/#bullet-class","title":"Bullet class","text":"Source code in <code>src/bullet.py</code> <pre><code>class Bullet:\n    def __init__(self, sw: float, sh: float, player: Player) -&gt; None:\n        self.sw = sw  # Screen width\n        self.sh = sh  # Screen height\n        self.point = (\n            player.head\n        )  # Bullet starting point (same as player's head position)\n        self.x, self.y = self.point  # Current position of the bullet\n        self.w = 20  # Width of the bullet\n        self.h = 20  # Height of the bullet\n        self.c = (\n            player.cosine\n        )  # Cosine of the player's angle (used for bullet's horizontal velocity)\n        self.s = (\n            player.sine\n        )  # Sine of the player's angle (used for bullet's vertical velocity)\n        self.xv = self.c * 10  # Horizontal velocity of the bullet\n        self.yv = self.s * 10  # Vertical velocity of the bullet\n\n    def move(self) -&gt; None:\n        \"\"\"Move the bullet according to its velocity.\"\"\"\n        self.x += self.xv\n        self.y -= self.yv  # Subtracting yv since y-axis is inverted in pygame\n\n    def draw(self, win: Surface) -&gt; None:\n        # Draw the bullet on the screen\n        pygame.draw.circle(\n            win,\n            (255, 255, 255),\n            (self.x + self.w // 2, self.y + self.h // 2),\n            self.w // 2,\n        )\n        # Draw a circle representing the bullet with white color\n\n    def checkOffScreen(self) -&gt; bool:\n        \"\"\"Check if the bullet is off the screen.\n\n        Returns:\n            True if bullet is off the screen.\n        \"\"\"\n        if self.x &lt; -50 or self.x &gt; self.sw or self.y &gt; self.sh or self.y &lt; -50:\n            return True\n        return False\n</code></pre>"},{"location":"api_reference/bullet_reference/#src.bullet.Bullet.checkOffScreen","title":"<code>checkOffScreen()</code>","text":"<p>Check if the bullet is off the screen.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if bullet is off the screen.</p> Source code in <code>src/bullet.py</code> <pre><code>def checkOffScreen(self) -&gt; bool:\n    \"\"\"Check if the bullet is off the screen.\n\n    Returns:\n        True if bullet is off the screen.\n    \"\"\"\n    if self.x &lt; -50 or self.x &gt; self.sw or self.y &gt; self.sh or self.y &lt; -50:\n        return True\n    return False\n</code></pre>"},{"location":"api_reference/bullet_reference/#src.bullet.Bullet.move","title":"<code>move()</code>","text":"<p>Move the bullet according to its velocity.</p> Source code in <code>src/bullet.py</code> <pre><code>def move(self) -&gt; None:\n    \"\"\"Move the bullet according to its velocity.\"\"\"\n    self.x += self.xv\n    self.y -= self.yv  # Subtracting yv since y-axis is inverted in pygame\n</code></pre>"},{"location":"api_reference/cell_reference/","title":"Cell module","text":""},{"location":"api_reference/cell_reference/#cell-class","title":"Cell class","text":"<p>             Bases: <code>GameObject</code></p> Source code in <code>src/cell.py</code> <pre><code>class Cell(GameObject):\n    def __init__(self, sw: int, sh: int, image: Surface):\n        super().__init__(sw, sh, image)\n\n        # Generate a random starting point for the cell\n        self.ranPoint = random.choice(\n            [\n                (\n                    random.randrange(0, sw - self.w),\n                    random.choice([-1 * self.h - 5, sh + 5]),\n                ),\n                (\n                    random.choice([-1 * self.w - 5, sw + 5]),\n                    random.randrange(0, sh - self.h),\n                ),\n            ]\n        )\n        self.x, self.y = self.ranPoint  # Current position of the cell\n        # Determine the direction of movement based on starting point\n        if self.x &lt; sw // 2:\n            self.x_dir = (\n                1  # Move right if starting point is on the left half of the screen\n            )\n        else:\n            self.x_dir = (\n                -1\n            )  # Move left if starting point is on the right half of the screen\n        if self.y &lt; sh // 2:\n            self.y_dir = (\n                1  # Move down if starting point is on the top half of the screen\n            )\n        else:\n            self.y_dir = (\n                -1\n            )  # Move up if starting point is on the bottom half of the screen\n        self.xv = self.x_dir * 2  # Horizontal velocity of the cell\n        self.yv = self.y_dir * 2  # Vertical velocity of the cell\n\n    def draw(self, win: Surface) -&gt; None:\n        \"\"\"Draw the cell on the screen.\n\n        Args:\n            win: target window.\n        \"\"\"\n        win.blit(self.img, (self.x, self.y))\n</code></pre>"},{"location":"api_reference/cell_reference/#src.cell.Cell.draw","title":"<code>draw(win)</code>","text":"<p>Draw the cell on the screen.</p> <p>Parameters:</p> Name Type Description Default <code>win</code> <code>Surface</code> <p>target window.</p> required Source code in <code>src/cell.py</code> <pre><code>def draw(self, win: Surface) -&gt; None:\n    \"\"\"Draw the cell on the screen.\n\n    Args:\n        win: target window.\n    \"\"\"\n    win.blit(self.img, (self.x, self.y))\n</code></pre>"},{"location":"api_reference/enemy_bullet_reference/","title":"enemyBullet module","text":""},{"location":"api_reference/enemy_bullet_reference/#enemybullet-class","title":"EnemyBullet class","text":"<p>             Bases: <code>object</code></p> Source code in <code>src/enemyBullet.py</code> <pre><code>class EnemyBullet(object):\n    def __init__(self, player: Player, x: float, y: float) -&gt; None:\n        self.x = x  # Initial x-coordinate of the bullet\n        self.y = y  # Initial y-coordinate of the bullet\n        self.w = 20.0  # Width of the bullet\n        self.h = 20.0  # Height of the bullet\n\n        # Calculate the direction towards the player\n        self.dx, self.dy = player.x - self.x, player.y - self.y\n        self.dist = math.hypot(self.dx, self.dy)  # Distance between bullet and player\n        self.dx, self.dy = (\n            self.dx / self.dist,\n            self.dy / self.dist,\n        )  # Normalize the direction vector\n        self.xv = self.dx * 5  # Horizontal velocity of the bullet\n        self.yv = self.dy * 5  # Vertical velocity of the bullet\n\n    def draw(self, win: Surface) -&gt; None:\n        \"\"\"Draw the enemy bullet on the screen.\"\"\"\n        pygame.draw.circle(\n            win, (255, 0, 0), (self.x + self.w // 2, self.y + self.h // 2), self.w // 2\n        )\n</code></pre>"},{"location":"api_reference/enemy_bullet_reference/#src.enemyBullet.EnemyBullet.draw","title":"<code>draw(win)</code>","text":"<p>Draw the enemy bullet on the screen.</p> Source code in <code>src/enemyBullet.py</code> <pre><code>def draw(self, win: Surface) -&gt; None:\n    \"\"\"Draw the enemy bullet on the screen.\"\"\"\n    pygame.draw.circle(\n        win, (255, 0, 0), (self.x + self.w // 2, self.y + self.h // 2), self.w // 2\n    )\n</code></pre>"},{"location":"api_reference/enemy_reference/","title":"Enemy module","text":""},{"location":"api_reference/enemy_reference/#enemy-class","title":"Enemy class","text":"<p>             Bases: <code>GameObject</code></p> Source code in <code>src/enemy.py</code> <pre><code>class Enemy(GameObject):\n    def __init__(self, sw: int, sh: int, image: Surface) -&gt; None:\n        super().__init__(sw, sh, image)\n\n        # Generate a random starting point for the enemy\n        self.ranPoint = random.choice(\n            [\n                (\n                    random.randrange(0, sw - self.w),\n                    random.choice([-1 * self.h - 5, sh + 5]),\n                ),\n                (\n                    random.choice([-1 * self.w - 5, sw + 5]),\n                    random.randrange(0, sh - self.h),\n                ),\n            ]\n        )\n        self.x, self.y = self.ranPoint  # Current position of the enemy\n        # Determine the direction of movement based on starting point\n        if self.x &lt; sw // 2:\n            self.x_dir = (\n                1  # Move right if starting point is on the left half of the screen\n            )\n        else:\n            self.x_dir = (\n                -1\n            )  # Move left if starting point is on the right half of the screen\n        if self.y &lt; sh // 2:\n            self.y_dir = (\n                1  # Move down if starting point is on the top half of the screen\n            )\n        else:\n            self.y_dir = (\n                -1\n            )  # Move up if starting point is on the bottom half of the screen\n        self.xv = self.x_dir * 2  # Horizontal velocity of the enemy\n        self.yv = self.y_dir * 2  # Vertical velocity of the enemy\n\n    def draw(self, win: Surface) -&gt; None:\n        # Draw the enemy on the screen\n        win.blit(self.img, (self.x, self.y))\n</code></pre>"},{"location":"api_reference/player_reference/","title":"Player module","text":""},{"location":"api_reference/player_reference/#direction-class","title":"Direction class","text":"<p>             Bases: <code>StrEnum</code></p> Source code in <code>src/player.py</code> <pre><code>class Direction(StrEnum):\n    FORWARD = \"forward\"\n    BACKWARD = \"backward\"\n    LEFT = \"left\"\n    RIGHT = \"right\"\n</code></pre>"},{"location":"api_reference/player_reference/#player-class","title":"Player class","text":"<p>             Bases: <code>GameObject</code></p> <p>The class representing a character controlled by the player.</p> Source code in <code>src/player.py</code> <pre><code>class Player(GameObject):\n    \"\"\"The class representing a character controlled by the player.\"\"\"\n\n    def __init__(self, sw: int, sh: int, image: Surface) -&gt; None:\n        super().__init__(sw, sh, image)\n        self.x: int = sw // 2  # Initial x-coordinate of the player (centered)\n        self.y: int = sh // 2  # Initial y-coordinate of the player (centered)\n        self.angle = 0  # Initial angle of rotation\n        self.rotatedSurf = pygame.transform.rotate(\n            self.img, self.angle\n        )  # Rotated player image surface\n        self.rotatedRect = (\n            self.rotatedSurf.get_rect()\n        )  # Rectangular area of the rotated player image\n        self.rotatedRect.center = (self.x, self.y)  # Center of the rotated player image\n        self.cosine = math.cos(\n            math.radians(self.angle + 90)\n        )  # Cosine of the angle (used for direction calculation)\n        self.sine = math.sin(\n            math.radians(self.angle + 90)\n        )  # Sine of the angle (used for direction calculation)\n        self.head = (\n            self.x + self.cosine * self.w // 2,\n            self.y - self.sine * self.h // 2,\n        )  # Position of player head\n\n    def draw(self, win: Surface) -&gt; None:\n        \"\"\"Draw the player on the screen.\n\n        Args:\n            win: target window.\n        \"\"\"\n        win.blit(self.rotatedSurf, self.rotatedRect)\n\n    def rotate(self) -&gt; None:\n        \"\"\"Rotate the player image surface and update the rectangular area and head position.\"\"\"\n        self.rotatedSurf = pygame.transform.rotate(self.img, self.angle)\n        self.rotatedRect = self.rotatedSurf.get_rect()\n        self.rotatedRect.center = (self.x, self.y)\n        self.cosine = math.cos(math.radians(self.angle + 90))\n        self.sine = math.sin(math.radians(self.angle + 90))\n        self.head = (\n            self.x + self.cosine * self.w // 2,\n            self.y - self.sine * self.h // 2,\n        )\n\n    def turn(self, direction: Direction) -&gt; None:\n        \"\"\"Turn the player `left` or `right` by ``5`` degrees and update rotation.\n\n        Args:\n            direction: rotation direction.\n        \"\"\"\n        if direction == Direction.LEFT:\n            self.angle += 5\n        elif direction == Direction.RIGHT:\n            self.angle -= 5\n        self.rotate()\n\n    def move(self, direction: Direction) -&gt; None:\n        \"\"\"Move the player `forward` or `backward` based on its direction and update rotation.\n\n        Args:\n            direction: movment direction.\n        \"\"\"\n        if direction == Direction.FORWARD:\n            self.x += int(self.cosine * 6)\n            self.y -= int(self.sine * 6)\n        elif direction == Direction.BACKWARD:\n            self.x -= int(self.cosine * 6)\n            self.y += int(self.sine * 6)\n        self.rotate()\n\n    def updateLocation(self) -&gt; None:\n        \"\"\"Update player's location if it goes beyond screen boundaries.\"\"\"\n        if self.x &gt; self.sw + 50:\n            self.x = 0\n        elif self.x &lt; 0 - self.w:\n            self.x = self.sw\n        elif self.y &lt; -50:\n            self.y = self.sh\n        elif self.y &gt; self.sh + 50:\n            self.y = 0\n</code></pre>"},{"location":"api_reference/player_reference/#src.player.Player.draw","title":"<code>draw(win)</code>","text":"<p>Draw the player on the screen.</p> <p>Parameters:</p> Name Type Description Default <code>win</code> <code>Surface</code> <p>target window.</p> required Source code in <code>src/player.py</code> <pre><code>def draw(self, win: Surface) -&gt; None:\n    \"\"\"Draw the player on the screen.\n\n    Args:\n        win: target window.\n    \"\"\"\n    win.blit(self.rotatedSurf, self.rotatedRect)\n</code></pre>"},{"location":"api_reference/player_reference/#src.player.Player.move","title":"<code>move(direction)</code>","text":"<p>Move the player <code>forward</code> or <code>backward</code> based on its direction and update rotation.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>Direction</code> <p>movment direction.</p> required Source code in <code>src/player.py</code> <pre><code>def move(self, direction: Direction) -&gt; None:\n    \"\"\"Move the player `forward` or `backward` based on its direction and update rotation.\n\n    Args:\n        direction: movment direction.\n    \"\"\"\n    if direction == Direction.FORWARD:\n        self.x += int(self.cosine * 6)\n        self.y -= int(self.sine * 6)\n    elif direction == Direction.BACKWARD:\n        self.x -= int(self.cosine * 6)\n        self.y += int(self.sine * 6)\n    self.rotate()\n</code></pre>"},{"location":"api_reference/player_reference/#src.player.Player.rotate","title":"<code>rotate()</code>","text":"<p>Rotate the player image surface and update the rectangular area and head position.</p> Source code in <code>src/player.py</code> <pre><code>def rotate(self) -&gt; None:\n    \"\"\"Rotate the player image surface and update the rectangular area and head position.\"\"\"\n    self.rotatedSurf = pygame.transform.rotate(self.img, self.angle)\n    self.rotatedRect = self.rotatedSurf.get_rect()\n    self.rotatedRect.center = (self.x, self.y)\n    self.cosine = math.cos(math.radians(self.angle + 90))\n    self.sine = math.sin(math.radians(self.angle + 90))\n    self.head = (\n        self.x + self.cosine * self.w // 2,\n        self.y - self.sine * self.h // 2,\n    )\n</code></pre>"},{"location":"api_reference/player_reference/#src.player.Player.turn","title":"<code>turn(direction)</code>","text":"<p>Turn the player <code>left</code> or <code>right</code> by <code>5</code> degrees and update rotation.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>Direction</code> <p>rotation direction.</p> required Source code in <code>src/player.py</code> <pre><code>def turn(self, direction: Direction) -&gt; None:\n    \"\"\"Turn the player `left` or `right` by ``5`` degrees and update rotation.\n\n    Args:\n        direction: rotation direction.\n    \"\"\"\n    if direction == Direction.LEFT:\n        self.angle += 5\n    elif direction == Direction.RIGHT:\n        self.angle -= 5\n    self.rotate()\n</code></pre>"},{"location":"api_reference/player_reference/#src.player.Player.updateLocation","title":"<code>updateLocation()</code>","text":"<p>Update player's location if it goes beyond screen boundaries.</p> Source code in <code>src/player.py</code> <pre><code>def updateLocation(self) -&gt; None:\n    \"\"\"Update player's location if it goes beyond screen boundaries.\"\"\"\n    if self.x &gt; self.sw + 50:\n        self.x = 0\n    elif self.x &lt; 0 - self.w:\n        self.x = self.sw\n    elif self.y &lt; -50:\n        self.y = self.sh\n    elif self.y &gt; self.sh + 50:\n        self.y = 0\n</code></pre>"},{"location":"api_reference/virus_reference/","title":"Virus module","text":""},{"location":"api_reference/virus_reference/#virus-class","title":"Virus class","text":"<p>             Bases: <code>GameObject</code></p> Source code in <code>src/virus.py</code> <pre><code>class Virus(GameObject):\n    def __init__(self, sw: int, sh: int, rank: int, images: list[Surface]) -&gt; None:\n        super().__init__(sw, sh, images[0])\n        \"\"\"Initialize a virus object.\n\n        Args:\n            sw (int): Screen width.\n            sh (int): Screen height.\n            rank (int): Rank of the virus.\n            images (list): List of images for different ranks of the virus.\n        \"\"\"\n        self.rank = rank\n        # Select image based on virus rank\n        if self.rank == 1:\n            self.image = images[0]\n        elif self.rank == 2:\n            self.image = images[1]\n        else:\n            self.image = images[2]\n\n        # Set width and height based on virus rank\n        self.w = 50 * rank\n        self.h = 50 * rank\n\n        # Randomize initial position\n        self.ranPoint = random.choice(\n            [\n                (\n                    random.randrange(0, sw - self.w),\n                    random.choice([-1 * self.h - 5, sh + 5]),\n                ),\n                (\n                    random.choice([-1 * self.w - 5, sw + 5]),\n                    random.randrange(0, sh - self.h),\n                ),\n            ]\n        )\n        self.x, self.y = self.ranPoint\n\n        # Determine initial direction based on position\n        if self.x &lt; sw // 2:\n            self.x_dir = 1\n        else:\n            self.x_dir = -1\n        if self.y &lt; sh // 2:\n            self.y_dir = 1\n        else:\n            self.y_dir = -1\n\n        # Set random velocities\n        self.xv = self.x_dir * random.randrange(1, 3)\n        self.yv = self.y_dir * random.randrange(1, 3)\n\n    def draw(self, win: Surface) -&gt; None:\n        \"\"\"Draw the virus on the window.\n\n        Args:\n            win: Pygame window surface.\n        \"\"\"\n        win.blit(self.image, (self.x, self.y))\n</code></pre>"},{"location":"api_reference/virus_reference/#src.virus.Virus.draw","title":"<code>draw(win)</code>","text":"<p>Draw the virus on the window.</p> <p>Parameters:</p> Name Type Description Default <code>win</code> <code>Surface</code> <p>Pygame window surface.</p> required Source code in <code>src/virus.py</code> <pre><code>def draw(self, win: Surface) -&gt; None:\n    \"\"\"Draw the virus on the window.\n\n    Args:\n        win: Pygame window surface.\n    \"\"\"\n    win.blit(self.image, (self.x, self.y))\n</code></pre>"}]}